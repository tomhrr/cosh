/// The opcodes used in the compiler and the bytecode.
#[derive(Debug, Clone, Copy)]
pub enum OpCode {
    Constant = 1,
    Add = 2,
    Subtract = 3,
    Multiply = 4,
    Divide = 5,
    EndFn = 6,
    Call = 7,
    CallImplicit = 8,
    GLVCall = 9,
    Function = 10,
    Var = 11,
    SetVar = 12,
    GetVar = 13,
    SetLocalVar = 14,
    GetLocalVar = 15,
    PopLocalVar = 16,
    Jump = 17,
    JumpNe = 18,
    JumpR = 19,
    JumpNeR = 20,
    JumpNeREqC = 21,
    Clone = 22,
    Yield = 23,
    Error = 24,
    Return = 25,
    Import = 26,
    Eq = 27,
    Gt = 28,
    Lt = 29,
    Cmp = 30,
    Print = 31,
    Dup = 32,
    Swap = 33,
    Drop = 34,
    Rot = 35,
    Over = 36,
    Depth = 37,
    Clear = 38,
    DupIsNull = 39,
    StartList = 40,
    EndList = 41,
    StartHash = 42,
    StartSet = 43,
    AddConstant = 44,
    EqConstant = 45,
    CallConstant = 46,
    SubtractConstant = 47,
    MultiplyConstant = 48,
    DivideConstant = 49,
    CallImplicitConstant = 50,
    Shift = 51,
    GLVShift = 52,
    Push = 53,
    Pop = 54,
    Bool = 55,
    Int = 56,
    BigInt = 57,
    Str = 58,
    Flt = 59,
    IsNull = 60,
    IsBool = 61,
    IsInt = 62,
    IsBigInt = 63,
    IsStr = 64,
    IsFlt = 65,
    IsList = 66,
    IsCallable = 67,
    IsShiftable = 68,
    Open = 69,
    Readline = 70,
    Rand = 71,
    ToggleMode = 72,
    PrintStack = 73,
    ToFunction = 74,
    Byte = 75,
    IsByte = 76,
    Read = 77,
    Remainder = 78,
    Unknown = 255,
}

/// Convert a byte to an opcode value.
pub fn to_opcode(value: u8) -> OpCode {
    match value {
        1 => OpCode::Constant,
        2 => OpCode::Add,
        3 => OpCode::Subtract,
        4 => OpCode::Multiply,
        5 => OpCode::Divide,
        6 => OpCode::EndFn,
        7 => OpCode::Call,
        8 => OpCode::CallImplicit,
        9 => OpCode::GLVCall,
        10 => OpCode::Function,
        11 => OpCode::Var,
        12 => OpCode::SetVar,
        13 => OpCode::GetVar,
        14 => OpCode::SetLocalVar,
        15 => OpCode::GetLocalVar,
        16 => OpCode::PopLocalVar,
        17 => OpCode::Jump,
        18 => OpCode::JumpNe,
        19 => OpCode::JumpR,
        20 => OpCode::JumpNeR,
        21 => OpCode::JumpNeREqC,
        22 => OpCode::Clone,
        23 => OpCode::Yield,
        24 => OpCode::Error,
        25 => OpCode::Return,
        26 => OpCode::Import,
        27 => OpCode::Eq,
        28 => OpCode::Gt,
        29 => OpCode::Lt,
        30 => OpCode::Cmp,
        31 => OpCode::Print,
        32 => OpCode::Dup,
        33 => OpCode::Swap,
        34 => OpCode::Drop,
        35 => OpCode::Rot,
        36 => OpCode::Over,
        37 => OpCode::Depth,
        38 => OpCode::Clear,
        39 => OpCode::DupIsNull,
        40 => OpCode::StartList,
        41 => OpCode::EndList,
        42 => OpCode::StartHash,
        43 => OpCode::StartSet,
        44 => OpCode::AddConstant,
        45 => OpCode::EqConstant,
        46 => OpCode::CallConstant,
        47 => OpCode::SubtractConstant,
        48 => OpCode::MultiplyConstant,
        49 => OpCode::DivideConstant,
        50 => OpCode::CallImplicitConstant,
        51 => OpCode::Shift,
        52 => OpCode::GLVShift,
        53 => OpCode::Push,
        54 => OpCode::Pop,
        55 => OpCode::Bool,
        56 => OpCode::Int,
        57 => OpCode::BigInt,
        58 => OpCode::Str,
        59 => OpCode::Flt,
        60 => OpCode::IsNull,
        61 => OpCode::IsBool,
        62 => OpCode::IsInt,
        63 => OpCode::IsBigInt,
        64 => OpCode::IsStr,
        65 => OpCode::IsFlt,
        66 => OpCode::IsList,
        67 => OpCode::IsCallable,
        68 => OpCode::IsShiftable,
        69 => OpCode::Open,
        70 => OpCode::Readline,
        71 => OpCode::Rand,
        72 => OpCode::ToggleMode,
        73 => OpCode::PrintStack,
        74 => OpCode::ToFunction,
        75 => OpCode::Byte,
        76 => OpCode::IsByte,
        77 => OpCode::Read,
        78 => OpCode::Remainder,
        255 => OpCode::Unknown,
        _ => OpCode::Unknown,
    }
}
